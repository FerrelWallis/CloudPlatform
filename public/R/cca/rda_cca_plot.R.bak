rm(list = ls(all = TRUE))
options(warn = -1)
args <- commandArgs(TRUE)
#args <- c("-pci","C:/Users/Administrator/Desktop/yun/rdacca_twopart/xls/percent.xls"
#          ,"-sai","C:/Users/Administrator/Desktop/yun/rdacca_twopart/xls/samples.xls"
#          ,"-spi","C:/Users/Administrator/Desktop/yun/rdacca_twopart/xls/species.xls"
#          ,"-ei","C:/Users/Administrator/Desktop/yun/rdacca_twopart/xls/envi.xls"
#          ,"-o","C:/Users/Administrator/Desktop/yun/rdacca_twopart/png"
#          ,"-g","C:/Users/Administrator/Desktop/yun/rdacca_twopart/xls/group.xls"
#)
checknecessary <- function(args, spec) {
  dd <- spec[, 3]; dd <- which(dd == "2")
  data <- as.character(t(spec[dd, 1:2])); x <- data
  lab <- args[seq(1, length(args), 2)]; ll <- length(lab)
  for (i in 1:ll) {
    data[which(data == lab[i])] <- 1
  }
  data[which(data != "1")] <- 0
  jishu <- as.numeric(data[seq(1, length(data), 2)]); oushu <- as.numeric(data[seq(2, length(data), 2)])
  panduan <- jishu + oushu
  panduan <- which(panduan == 0)
  if (length(panduan) == 0) { return(TRUE) }else {
    cat("    Tip:Missing the necessary parameters/n")
    ll <- length(dd)
    for (i in 1:ll) {
      cat(paste("[", "[", spec[dd[i], 1], "|", spec[dd[i], 2], "]", "<", spec[dd[i], 4], ">", "]", sep = ""))
    }
    return(FALSE) }
}
changgeshowstr <- function(list) {
  lmax <- max(nchar(list)) + 4
  ll <- length(list)
  for (i in 1:ll) {

    cc <- lmax - nchar(list[i])

    list[i] <- paste(list[i], paste(rep(" ", cc), collapse = ""), sep = "")
  }
  return(list)
}
star <- function(list) {
  list[which(list == "2")] <- "*"
  list[which(list != "*")] <- " "
  return(list)
}
makeopt <- function(spec) {
  s <- spec; ll <- nrow(s)
  opt <- list()
  for (i in 1:ll) {

    if (s[i, 4] == "numeric") {
      opt[[i]] <- as.numeric(s[i, 6])
    }
    if (s[i, 4] == "logical") {
      opt[[i]] <- as.logical((s[i, 6]))
    }
    if (s[i, 4] == "character") {
      opt[[i]] <- s[i, 6]
    }
  }
  names(opt) <- s[, 1]
  return(opt)
}
getScriptName <- function() {
  falseargs <- commandArgs()
  falseargslist <- strsplit(falseargs[4], "=")
  return(as.character(falseargslist[[1]][2]))
}
caterror <- function(spec) {
  nleng <- nrow(spec); dd_list <- c()
  for (i in 1:nleng) {
    dd_list[i] <- paste("[", "[", spec[i, 1], "|", spec[i, 2], "]", "<", spec[i, 4], ">", "]", sep = "")
  }
  alldd <- paste(dd_list, collapse = " ")
  cat(paste("Useage:", getScriptName(), alldd, sep = " "))
}
showhelp <- function(spec) {
  caterror(spec); cat("\n")
  length <- nrow(spec)
  list1 <- paste(spec[, 1], "|", spec[, 2], sep = ""); list2 <- spec[, 3]; list3 <- spec[, 4]; list4 <- spec[, 5]; list5 <- spec[, 6]
  list1 <- changgeshowstr(list1)
  list2 <- star(list2); list2 <- changgeshowstr(list2)
  list3 <- changgeshowstr(list3)
  list4 <- changgeshowstr(list4)
  list5 <- changgeshowstr(list5)
  for (i in 1:length) {
    cat(paste("    ", list1[i], list2[i], list3[i], list4[i], "default  ", list5[i], "\n"))
  }

}
checkp <- function(args, spec) {
  length <- length(args); ip <- seq(1, length, 2); dd <- args[ip]
  cc <- c(spec[, 1], spec[, 2])
  if (all(dd %in% cc)) { return(T) }else {
    return(F) }
}
ascanshu <- function(opt, spec) {
  as <- spec[, 4]; ip <- which(as == "numeric")
  if (length(ip) == 0) { return(opt) }
  lab <- spec[ip, 1]; length <- length(lab)

  for (i in 1:length) {
    a <- substr(lab[i], 3, nchar(lab[i]))
    opt[[which(names(opt) == a)]] <- as.numeric(opt[[which(names(opt) == a)]])
  }
  return(opt)
}
completeopt <- function(args, opt, spec) {

  lab <- args[seq(1, length(args), 2)]; num <- args[seq(2, length(args), 2)]
  list <- list(); ll <- nrow(spec)
  for (i in 1:ll) {
    list[[i]] <- spec[i, 1]
  }
  names(list) <- spec[, 2]
  ll <- length(lab)
  for (i in 1:ll) {
    if (substr(lab[i], 1, 2) != "--") {
      lab[i] <- list[[which(names(list) == lab[i])]]
    }
    lab[i] <- substr(lab[i], 3, nchar(lab[i]))
  }
  for (i in 1:ll) {
    opt[[which(names(opt) == lab[i])]] <- num[i]
  }
  opt <- ascanshu(opt, spec)
  return(opt)
}
cheackun <- function(spec) {
  if (length(spec[, 1]) != length(unique(spec[, 1])) || length(spec[, 2]) != length(unique(spec[, 2])))
    { return(F) }else { return(T) }
}
spec <- matrix(c("samplespath", "sai", 2, "character", "Sample data path", "",
                 "speciespath", "spi", 2, "character", "Data of species path", "",
                 "envipath", "ei", 2, "character", "Environmental data path", "",
                 "percentpath", "pci", 2, "character", "Percentage data path", "",
                 "grouppath", "g", 1, "character", "groupFile path", "",
                 "filepath", "o", 2, "character", "package path of image output", "",
                 "xyread", "xyr", 1, "character", "The xy axis data read", "1:2",
                 "origin_point", "op", 1, "character", "set The origin point x y coordinates", "0:0",
                 "showsample_pt", "sspt", 1, "character", "Whether to display sample points and names", "TRUE:TRUE",
                 "samplepoint", "sap", 1, "character", "The pattern of the sample point", "#1E90FF:6",
                 "sampletext", "sat", 1, "character", "The pattern of the sample text", "#1E90FF:7",
                 "groupcolor","gc",1,"character","set group colours","#336666:#996633:#CCCC33:#336633:#990033:#FFCC99:#333366:#669999:#996600",
                 "showenvi_pl", "sepl", 1, "character", "show the points and lines of the environment", "TRUE:TRUE",
                 "envitext", "ett", 1, "character", "The pattern of the envi text", "#E41A1C:7",
                 "enviline_color", "elc", 1, "character", "color of line envi", "#E41A1C",
                 "showspecies_pt", "sppt", 1, "character", "show the points and text of the species", "TRUE:TRUE",
                 "speciespoint", "spp", 1, "character", "The pattern of the species point", "#FF8C00:6",
                 "speciestext", "spt", 1, "character", "The pattern of the species text", "#FF8C00:7",
                 "xtext_style", "xts", 1, "character", "X text style Font:font type:font size", "sans:bold.italic:16",
                 "ytext_style", "yts", 1, "character", "Y text style Font:font type:font size", "sans:bold.italic:16",
                 "xlab_style", "xls", 1, "character", "X lab style Font:font type:font size:name", "sans:bold.italic:18",
                 "ylab_style", "yls", 1, "character", "Y lab style Font:font type:font size:name", "sans:bold.italic:18",
                 "main_style", "ms", 1, "character", "Main style Font:font type:font size:name", "sans:bold.italic:12: ",
                 "imageSize", "is", 1, "character", "The height and width of the picture", "12:12",
                 "resolution", "dpi", 1, "numeric", "Set the resolution to allow 72,96,300 or 600", "300",
                 "help", "h", 1, "character", "help document", ""
), byrow = TRUE, ncol = 6)
if (!cheackun(spec)) {
  cat("Developer your parameter write repeat, quick fix bug")
  quit()
}
opt <- makeopt(spec)
speco <- spec
spec[, 1] <- paste("--", spec[, 1], sep = ""); spec[, 2] <- paste("-", spec[, 2], sep = "")
if (length(args) == 0 ||
  args == "--help" ||
  args == "-h") {
  showhelp(spec)
  quit()
}
if (length(args) %% 2 == 1 || !checkp(args, spec)) {
  cat("Tip:Parameter name error or missing parameter content/n")
  caterror(spec)
  quit()
}
if (!checknecessary(args, spec)) {
  cat("/n")
  quit()
}
opt <- completeopt(args, opt, spec)
rm(list = ls()[which(ls() != 'opt')])


#---------------------------------------------------------------------------------------------------------

fenge <- function(str) {
  str <- strsplit(str, ":")[[1]]
  return(str)
}
cbiaoge <- function(biaoge) {
  rownames(biaoge) <- biaoge[, 1]
  biaoge <- biaoge[, -1]
  return(biaoge)
}
origin_point <- as.numeric(fenge(opt$origin_point))
imageSize <- as.numeric(fenge(opt$imageSize))
xyread <- as.numeric(fenge(opt$xyread))
showsample_pt <- as.logical(fenge(opt$showsample_pt))
showenvi_pl <- as.logical(fenge(opt$showenvi_pl))
showspecies_pt <- as.logical(fenge(opt$showspecies_pt))
samplepoint <- fenge(opt$samplepoint)
sampletext <- fenge(opt$sampletext)
envitext <- fenge(opt$envitext)
speciespoint <- fenge(opt$speciespoint)
speciestext <- fenge(opt$speciestext)
main_style <- fenge(opt$main_style)

xtext_style <- fenge(opt$xtext_style)
ytext_style <- fenge(opt$ytext_style)
xlab_style <- fenge(opt$xlab_style)
ylab_style <- fenge(opt$ylab_style)

aa <- read.delim(opt$percentpath, check.names = FALSE)
RDA1 <- paste(aa[xyread[1], 1], ":", aa[xyread[1], 2])
RDA2 <- paste(aa[xyread[2], 1], ":", aa[xyread[2], 2])
bb <- read.delim(opt$samplespath, check.names = FALSE)
bb <- as.matrix(cbiaoge(bb))
cc <- read.delim(opt$speciespath, check.names = FALSE)
cc <- as.matrix(cbiaoge(cc))
dd <- read.delim(opt$envipath, check.names = FALSE)
dd <- as.matrix(cbiaoge(dd))

#提取并转换“样本”数据
samples <- data.frame(sample = row.names(bb), RDA1 = bb[, 1], RDA2 = bb[, 2])

#提取并转换“物种”数据
species <- data.frame(spece = row.names(cc), RDA1 = cc[, 1], RDA2 = cc[, 2])

#提取并转换“环境因子”数据
envi <- data.frame(en = row.names(dd), RDA1 = dd[, 1], RDA2 = dd[, 2])
ll <- nrow(envi) * 2

#构建环境因子直线坐标
line_x <- 1:ll
line_x[seq(1, ll, 2)] <- origin_point[1]; line_x[seq(2, ll, 2)] <- envi[, 2]

line_y <- 1:ll
line_y[seq(1, ll, 2)] <- origin_point[2]; line_y[seq(2, ll, 2)] <- envi[, 3]

groupnames <- as.character(t(matrix(rep(rownames(envi), 2), ncol = 2)))
line_g <- groupnames
line_data <- data.frame(x = line_x, y = line_y, group = line_g)


resolution <- opt$resolution; if (resolution != 72 &&
  resolution != 96 &&
  resolution != 300 &&
  resolution != 600) { resolution <- 300 }

if (opt$grouppath != "") {
  gd <- read.delim(opt$grouppath, header = T)
  groupline <- rep(NA, nrow(samples))
  key1 <- as.character(samples[, 1])
  key2 <- as.character(gd[, 1])
  ll <- length(key1)
  linedata <- rep(NA, ll)
  for (i in 1:ll) {
    a <- key1[i]
    b <- which(key2 == a)[1]
    if (length(b) == 1) {
      linedata[i] <- as.character(gd[b, 2])
    }
  }
  line_data[which(is.na(linedata))] <- "no group"
  samples[, 4] <- linedata

}else {
  samples[, 4] <- rep(as.character(sampletext[1]), nrow(samples))
}


suppressMessages(library("ggrepel"))
suppressMessages(library("ggplot2"))

result <- ggplot(data = samples, aes(RDA1, RDA2)) +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  labs(x = RDA1, y = RDA2, title = main_style[4]) +
  theme(axis.text.y = element_text(family = ytext_style[1], face = ytext_style[2], size = as.numeric(ytext_style[3])),
        axis.text.x = element_text(family = xtext_style[1], face = xtext_style[2], size = as.numeric(xtext_style[3])),
        axis.title.x = element_text(size = as.numeric(xlab_style[3]), family = xlab_style[1], face = xlab_style[2]),
        axis.title.y = element_text(size = as.numeric(ylab_style[3]), family = ylab_style[1], face = ylab_style[2]),
        title = element_text(size = as.numeric(main_style[3]), family = main_style[1], face = main_style[2]),
  )
if (showspecies_pt[2]) {
  #显示物种数据的名字
  result <- result + geom_text_repel(data = species, aes(label = spece, x = RDA1, y = RDA2), color = as.character(speciestext[1]), size = as.numeric(speciestext[2]))
}

#设置原点并划线
result <- result +
  geom_hline(yintercept = origin_point[2], linetype = 2) +
  geom_vline(xintercept = origin_point[1], linetype = 2)

if (showspecies_pt[1]) {
  #物种数据点
  result <- result + geom_point(data = species, size = as.numeric(speciespoint[2]), color = as.character(speciespoint[1]), shape = 18)
}
if (showenvi_pl[1]) {
  #显示环境因子数据名字
  result <- result + geom_text(data = envi, aes(label = en), color = as.character(envitext[1]), size = as.numeric(envitext[2]))
}
if (showenvi_pl[2]) {
  #原点指向环境因子的直线
  result <- result + geom_line(data = line_data, aes(x = x, y = y, group = group), color = opt$enviline_color)
}

#color <- as.character(samplepoint[1])
#if (showsample_pt[1]) {
#  #显示样本点
#  result <- result + geom_point(aes(color = samples[, 4]), size = as.numeric(samplepoint[2])) }
#
#if (showsample_pt[2]) {
#  #显示样本名称
#  result <- result + geom_text_repel(aes(label = sample, color = samples[, 4]), size = as.numeric(sampletext[2]))
#}

if (opt$grouppath != "") {
  result <- result +
    theme(legend.position = c("right")) +
    labs(color = "group")
  if (showsample_pt[1]) {
    #显示样本点
    result <- result + geom_point(aes(color = as.character(samples[, 4])), size = as.numeric(samplepoint[2])) }

  if (showsample_pt[2]) {
    #显示样本名称
    result <- result + geom_text_repel(aes(label = sample, color = as.character(samples[, 4])), show.legend = F,size = as.numeric(sampletext[2]))
  }
  groupcolor <- fenge(opt$groupcolor);groupcolor <- groupcolor[1:length(unique(samples[,4]))]
  result <- result + scale_color_manual(values = groupcolor)
}else {
  result <- result + theme(legend.position = "none", legend.title = element_blank())
  if (showsample_pt[1]) {
    #显示样本点
    result <- result + geom_point(color = samples[, 4][1], size = as.numeric(samplepoint[2])) }

  if (showsample_pt[2]) {
    #显示样本名称
    result <- result + geom_text_repel(aes(label = sample), color = samples[, 4][1], size = as.numeric(sampletext[2]))
  }
}

ggsave(paste(opt$filepath, "/", "rdacca", ".pdf" , sep = ""), width = imageSize[1], height = imageSize[2], dpi = resolution)



