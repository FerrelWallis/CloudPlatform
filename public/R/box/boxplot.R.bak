rm(list=ls(all=TRUE))
options(warn = -1)
args <- commandArgs(TRUE)
#args<-c("-i","C:/Users/Administrator/Desktop/yun/boxplot/data/test.txt","-o","C:/Users/Administrator/Desktop/yun/boxplot/data",
#        "-ymm","0:50"
#)
checknecessary <- function(args,spec){
  dd <- spec[,3];dd <- which(dd == "2")
  data <- as.character(t(spec[dd,1:2]));x <- data
  lab <- args[seq(1,length(args),2)];ll <- length(lab)
  for(i in 1:ll){
    data[which(data==lab[i])] <- 1
  }
  data[which(data != "1")] <- 0
  jishu <- as.numeric(data[seq(1,length(data),2)]);oushu <- as.numeric(data[seq(2,length(data),2)])
  panduan <- jishu +oushu
  panduan <- which(panduan == 0)
  if(length(panduan) == 0){return(TRUE)}else{
    cat("    Tip:Missing the necessary parameters\n")
    ll <- length(dd)
    for(i in 1:ll){
      cat(paste("[", "[", spec[dd[i], 1], "|", spec[dd[i], 2], "]", "<", spec[dd[i], 4], ">", "]", sep = ""))
    }
    return(FALSE)}
}
changgeshowstr <- function(list) {
  lmax <- max(nchar(list)) + 4
  ll <- length(list)
  for (i in 1:ll) {

    cc <- lmax - nchar(list[i])

    list[i] <- paste(list[i], paste(rep(" ", cc), collapse = ""), sep = "")
  }
  return(list)
}
star <- function(list) {
  list[which(list == "2")] <- "*"
  list[which(list != "*")] <- " "
  return(list)
}
makeopt <- function(spec) {
  s <- spec; ll <- nrow(s)
  opt <- list()
  for (i in 1:ll) {

    if (s[i, 4] == "numeric") {
      opt[[i]] <- as.numeric(s[i, 6])
    }
    if (s[i, 4] == "logical") {
      opt[[i]] <- as.logical((s[i, 6]))
    }
    if (s[i, 4] == "character") {
      opt[[i]] <- s[i, 6]
    }
  }
  names(opt) <- s[, 1]
  return(opt)
}
getScriptName <- function() {
  falseargs <- commandArgs()
  falseargslist <- strsplit(falseargs[4], "=")
  return(as.character(falseargslist[[1]][2]))
}
caterror <- function(spec) {
  nleng <- nrow(spec); dd_list <- c()
  for (i in 1:nleng) {
    dd_list[i] <- paste("[", "[", spec[i, 1], "|", spec[i, 2], "]", "<", spec[i, 4], ">", "]", sep = "")
  }
  alldd <- paste(dd_list, collapse = " ")
  cat(paste("Useage:", getScriptName(), alldd, sep = " "))
}
showhelp <- function(spec) {
  caterror(spec); cat("\n")
  length <- nrow(spec)
  list1 <- paste(spec[, 1], "|", spec[, 2], sep = ""); list2 <- spec[, 3]; list3 <- spec[, 4]; list4 <- spec[, 5]; list5 <- spec[, 6]
  list1 <- changgeshowstr(list1)
  list2 <- star(list2); list2 <- changgeshowstr(list2)
  list3 <- changgeshowstr(list3)
  list4 <- changgeshowstr(list4)
  list5 <- changgeshowstr(list5)
  for (i in 1:length) {
    cat(paste("    ", list1[i], list2[i], list3[i], list4[i], "default  ", list5[i], "\n"))
  }

}
checkp <- function(args, spec) {
  length <- length(args); ip <- seq(1, length, 2); dd <- args[ip]
  cc <- c(spec[, 1], spec[, 2])
  if (all(dd %in% cc)) { return(T) }else {
    return(F) }
}
ascanshu <- function(opt, spec) {
  as <- spec[, 4]; ip <- which(as == "numeric")
  if(length(ip) == 0){return(opt)}
  lab <- spec[ip, 1]; length <- length(lab)

  for (i in 1:length) {
    a <- substr(lab[i], 3, nchar(lab[i]))
    opt[[which(names(opt) == a)]] <- as.numeric(opt[[which(names(opt) == a)]])
  }
  return(opt)
}
completeopt <- function(args, opt, spec) {

  lab <- args[seq(1, length(args), 2)]; num <- args[seq(2, length(args), 2)]
  list <- list(); ll <- nrow(spec)
  for (i in 1:ll) {
    list[[i]] <- spec[i, 1]
  }
  names(list) <- spec[, 2]
  ll <- length(lab)
  for (i in 1:ll) {
    if (substr(lab[i], 1, 2) != "--") {
      lab[i] <- list[[which(names(list) == lab[i])]]
    }
    lab[i] <- substr(lab[i], 3, nchar(lab[i]))
  }
  for (i in 1:ll) {
    opt[[which(names(opt) == lab[i])]] <- num[i]
  }
  opt <- ascanshu(opt, spec)
  return(opt)
}
cheackun <- function(spec) {
  if (length(spec[, 1]) != length(unique(spec[, 1])) || length(spec[, 2]) != length(unique(spec[, 2])))
    { return(F) }else { return(T) }
}
spec <- matrix(c("tablepath", "i", 2, "character", "The path to the table data read", "",
                 "filepath", "o", 2, "character", "The package path of the output image", "",
                 "imageSize", "ls", 1, "character", "The height and width of the picture", "20:14",
                 "xtext_style", "xts", 1, "character", "X text style  sample:Font:font type:font size", "sans:bold.italic:13",
                 "ytext_style", "yts", 1, "character", "Y text style  sample:Font:font type:font size", "sans:bold.italic:14",
                 "xlab_style", "xls", 1, "character", "X lab style  sample:Font:font type:font size:name", "sans:bold.italic:12: ",
                 "ylab_style", "yls", 1, "character", "Y lab style  sample:Font:font type:font size:name", "sans:bold.italic:12: ",
                 "main_style", "ms", 1, "character", "Main style  sample:Font:font type:font size:name", "sans:bold.italic:12: ",
                 "legendtext_style", "lts", 1, "character", "Legend text style  sample: Font:font type:font size", "sans:bold.italic:15",
                 "legendtitle_style", "lls", 1, "character", "Legend title style  sample: Font:font type:font size:name", "sans:bold.italic:15: ",
                 "colorstyle","cs",1,"character","The parameter used to set the color of the column. The parameter arrangement is dark: the light color is a color group","#E41A1C:#1E90FF:#FF8C00:#4DAF4A:#984EA3:#40E0D0:#F4AAC4:#DC414B:#957624:#43B43C",
                 "resolution","dpi",1,"numeric","Here dpi is used to adjust the resolution, it can be 72,96,300 or 600, not all of these Numbers will become 300","300",
                 "main_position","mp",1,"numeric","Set the horizontal position of the main heading between 0 and 1, from left to right","0.1",
                 "legend_position","lp",1,"character","Set the position of the legend, parameter mode 'position: position ', four positions, right,left,bottom,top","right:top",
                 "legend_exist","le",1,"logical","Sets whether the legend exists","TRUE",
                 "alpha","alp",1,"numeric","Sets the overall transparency of the color","0.8",
                 "box_width","bw",1,"numeric","Width of box","0.7",
                 "legend_size_arrange","lsa",1,"character","Used to set the arrangement of the legend and the overall width and height","1:1.5:1.5",
                 "shoupoint","sp",1,"logical","Whether to show the inside of the box","FALSE",
                 "ylim","ymm",1,"character","axis ymin and ymax split by ':'","-99:-99",
                 "addition","add",1,"numeric","addition transparency, when '0' no display ","1",
                 "help", "h", 0, "logical", "Help document", "TRUE"
), byrow = TRUE, ncol = 6)
if (!cheackun(spec)) {
  cat("Developer your parameter write repeat, quick fix bug")
  quit()
}
opt <- makeopt(spec)
speco <- spec
spec[, 1] <- paste("--", spec[, 1], sep = ""); spec[, 2] <- paste("-", spec[, 2], sep = "")
if (length(args) == 0 ||
  args == "--help" ||
  args == "-h") {
  showhelp(spec)
  quit()
}
if (length(args) %% 2 == 1 || !checkp(args, spec)) {
  cat("Tip:Parameter name error or missing parameter content\n")
  caterror(spec)
  quit()
}
if(!checknecessary(args,spec)){
  cat("\n")
  quit()
}
opt <- completeopt(args, opt, spec)

suppressMessages(library("ggplot2"))


fenge <- function(str) {
  str <- strsplit(str, ":")[[1]]
  return(str)
}

tablepath <- opt$tablepath

filepath <- opt$filepath

main_style <- opt$main_style; main_style <- fenge(main_style)

xtext_style <- opt$xtext_style; xtext_style <- fenge(xtext_style)

ytext_style <- opt$ytext_style; ytext_style <- fenge(ytext_style)

xlab_style <- opt$xlab_style; xlab_style <- fenge(xlab_style)

ylab_style <- opt$ylab_style; ylab_style <- fenge(ylab_style)

legendtext_style <- opt$legendtext_style; legendtext_style <- fenge(legendtext_style)

legendtitle_style <- opt$legendtitle_style; legendtitle_style <- fenge(legendtitle_style)

imageSize <- opt$imageSize; imageSize <- fenge(imageSize)

colorstyle <- strsplit(opt$colorstyle, ":")[[1]]

resolution <- opt$resolution;if(resolution != 72 && resolution != 96 && resolution != 300 && resolution != 600){resolution <- 300}

legend_size_arrange <- opt$legend_size_arrange;legend_size_arrange <- fenge(legend_size_arrange)

legend_position <- opt$legend_position;legend_position <- fenge(legend_position)


data <- read.delim(tablepath,check.names=F)
data <- as.matrix(data)
names <- colnames(data);cl <- ncol(data);rw <- nrow(data)
dim(data) <- c(rw*cl,1)
data <- as.numeric(data)
name <- as.character(t(matrix(rep(names,rw),nrow =cl)))
usedata <- data.frame(name,data)
if(opt$ylim == "-99:-99"){
min <- min(usedata[,2]) ;max <- quantile((usedata[,2]))[4]/3*7
}else{
  ylim <- fenge(opt$ylim)
  min <- as.numeric(ylim[1]);max<- as.numeric(ylim[2])
}

result <- ggplot()+
  theme_classic()+
  geom_boxplot(data=usedata,aes(x=name,y=data,color=name),outlier.colour="blue",outlier.size=1,outlier.alpha = opt$addition
    #,notch = TRUE
    ,show.legend = opt$legend_exist
    ,width=opt$box_width,alpha=opt$alpha)+
 # geom_jitter(data=data1,aes(x=data1[,1],y=data1[,2],color=data1[,1]),width = opt$box_width/2.2)+
  #scale_fill_manual(values = colorstyle,name=legendtitle_style[4])+
  ylim(min,max)+
  scale_color_manual(values = colorstyle,name=legendtitle_style[4])+
  theme(
    legend.key.width = unit(as.numeric(legend_size_arrange[2]), "cm"),
    legend.key.height = unit(as.numeric(legend_size_arrange[3]), "cm"),
    legend.position = legend_position[1],
    legend.justification = c(legend_position[2]),
    #标题调节居左中右
    plot.title = element_text(hjust = opt$main_position),
  )+
  guides(color = guide_legend(
    reverse = T,
    ncol = as.numeric(legend_size_arrange[1]),
    byrow = TRUE
  )) +
  labs(x=xlab_style[4],y=ylab_style[4],title = main_style[4],color=" ")+
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        legend.background = element_blank(),
  )+
  theme(#y轴文本样式
    axis.text.y = element_text(family = ytext_style[1], face = ytext_style[2], size = as.numeric(ytext_style[3])),
    #x轴文本样式
    axis.text.x = element_text(family = ylab_style[1], face = ylab_style[2], size = as.numeric(ylab_style[3])),
    #图例文本样式
    legend.text = element_text(family = legendtext_style[1], size = as.numeric(legendtext_style[3]), face = legendtext_style[2]),
    #图例标题样式
    legend.title = element_text(size = as.numeric(legendtitle_style[3]), family = legendtitle_style[1], face = legendtitle_style[2]),
    #主标题样式
    title = element_text(size = as.numeric(main_style[3]), family = main_style[1], face = main_style[2]),
    #x轴标题样式
    axis.title.x = element_text(size = as.numeric(xlab_style[3]), family = xlab_style[1], face = xlab_style[2]),
    #y轴标题样式
    axis.title.y = element_text(size = as.numeric(ylab_style[3]), family = ylab_style[1], face = ylab_style[2]))+
  coord_flip()

if(opt$shoupoint == TRUE){result <- result + geom_jitter(data=usedata,aes(x=name,y=data,color=name),alpha=0.5,width = opt$box_width/2.2)}
filepath <- paste(opt$filepath, "/","box", ".", "pdf", sep = "")
ggsave(filepath,result,width = as.numeric(imageSize[1]),height = as.numeric(imageSize[2]),dpi = resolution)


